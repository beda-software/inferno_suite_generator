require 'base64'
require 'inferno/dsl/oauth_credentials'
require 'inferno_suite_generator/utils/helpers'
require_relative '../../version'
<% imports.each do |import| %> <%= import %>
<% end %>

<% group_file_list.each do |file_name| %>require_relative '<%= file_name %>'
  <% end %>

module <%= suite_module_name %>
  module <%= module_name %>
    class <%= class_name %> < Inferno::TestSuite
      title '<%= title %>'
      description %(
        The <%= groups_title %> Test Kit tests systems for their conformance to the [<%= ig_name %>](<%=ig_link %>).

        HL7® FHIR® resources are validated with the Java validator using
        <%= tx_server_url %> as the terminology server.
      )
      version VERSION

      VERSION_SPECIFIC_MESSAGE_FILTERS = <%=version_specific_message_filters%>.freeze

      def self.metadata
        @metadata ||= YAML.load_file(File.join(__dir__, 'metadata.yml'), aliases: true)[:groups].map do |raw_metadata|
            Generator::GroupMetadata.new(raw_metadata)
          end
      end

      fhir_resource_validator do
        igs '<%= ig_identifier %>'
        message_filters = [
                            "The value provided ('xml') was not found in the value set 'MimeType'",
                            "The value provided ('json') was not found in the value set 'MimeType'",
                            "The value provided ('ttl') was not found in the value set 'MimeType'"
                          ] + VERSION_SPECIFIC_MESSAGE_FILTERS

        cli_context do
          txServer ENV.fetch('TX_SERVER_URL', '<%= tx_server_url %>')
          disableDefaultResourceFetcher false
        end

        exclude_message do |message|
          Helpers.is_message_exist_in_list(message_filters, message.message)
        end

        perform_additional_validation do |resource, profile_url|
          ProvenanceValidator.validate(resource) if resource.instance_of?(FHIR::Provenance)
        end
      end

      links <%= links %>

      id :<%= suite_id %>

      input :url,
        title: 'FHIR Endpoint',
        description: 'URL of the FHIR endpoint',
        default: '<%= default_fhir_server %>'
      input :smart_credentials,
        title: 'OAuth Credentials',
        type: :oauth_credentials,
        optional: true
      input :header_name,
            title: 'Header name',
            optional: true
      input :header_value,
            title: 'Header value',
            optional: true

      fhir_client do
        url :url
        oauth_credentials :smart_credentials
        headers Helpers.get_http_header(header_name, header_value)
      end

      group do
        title '<%= groups_title %> FHIR API'
        id :<%= fhir_api_group_id %>
      <% outer_groups_before.each do |outer_group_before| %>
        <%= outer_group_before %>
      <% end %>
      <% group_id_list.each do |id| %>
        group from: :<%= id %>
      <% end %>
      <% outer_groups_after.each do |outer_group_after| %>
        <%= outer_group_after %>
      <% end %>
      end
    end
  end
end
